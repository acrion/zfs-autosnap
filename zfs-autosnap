#!/usr/bin/env bash

# Copyright (c) 2024, 2025 acrion innovations GmbH
# Authors: Stefan Zipproth, s.zipproth@acrion.ch
#
# This file is part of zfs-autosnap, see https://github.com/acrion/zfs-autosnap
#
# zfs-autosnap is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# zfs-autosnap is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with ditana-print-system-infos. If not, see <https://www.gnu.org/licenses/>.

# This script is based on timeshift-autosnap from https://gitlab.com/gobonja/timeshift-autosnap

[[ $(findmnt / -no fstype) == "overlay" ]] && { echo "==> skipping zfs-autosnap, because system is booted in Live CD mode..."; exit 0; }

[[ -v SKIP_AUTOSNAP ]] && { echo "==> skipping zfs-autosnap because SKIP_AUTOSNAP environment variable being set."; exit 0; }

readonly CONF_FILE=/etc/zfs-autosnap.conf

get_property() {
    if [[ ! -f $CONF_FILE ]]; then
        echo "$CONF_FILE not found! Using $1=$3" >&2
        param_value=$3
    else
        param_value=$(sed '/^\#/d' "$CONF_FILE" | grep "^$1" | tail -n 1 | \
        cut -d "=" -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

        if ([[ "$2" == "boolean" ]] && [[ "$param_value" != true ]] && [[ "$param_value" != false ]]) || \
           ([[ "$2" == "integer" ]] && [[ ! "$param_value" =~ ^[1-9][0-9]*$ ]]) || \
           ([[ "$2" == "string" ]] && [[ "$param_value" == "" ]]); then
            echo "Wrong parameter in $CONF_FILE. Using $1=$3" >&2
            param_value=$3
        fi
    fi

    echo "$param_value"
}

if $(get_property "skipAutosnap" "boolean" "false"); then
    echo "==> skipping zfs-autosnap because skipAutosnap in $CONF_FILE is TRUE." >&2
    exit 0
fi

readonly DATASET=$(get_property "dataset" "string" "ditana-root/ROOT/default")
readonly SNAPSHOT_DESCRIPTION=$(get_property "snapshotDescription" "string" "{zfs-autosnap} {created before upgrade}")
readonly DELETE_SNAPSHOTS=$(get_property "deleteSnapshots" "boolean" "true")
readonly MAX_SNAPSHOTS=$(get_property "maxSnapshots" "integer" "3")

if ! zfs list "${DATASET}" >/dev/null 2>&1; then
    echo "Dataset ${DATASET} does not exist." >&2
    exit 1
fi

readonly SNAPSHOT_NAME="autosnap_$(date '+%Y-%m-%d_%H-%M-%S')"
readonly LOCKFILE=$(mktemp -u /tmp/db.lck.XXXXXX)

cleanup_and_exit() {
    if [[ -f "$LOCKFILE" ]]; then
        mv "$LOCKFILE" /var/lib/pacman/db.lck
        echo "==> Restored pacman lock file."
    fi
    exit "$1"
}

trap 'cleanup_and_exit $?' EXIT

if [[ -f /var/lib/pacman/db.lck ]]; then
    mv /var/lib/pacman/db.lck "$LOCKFILE"
    echo "==> Temporarily removed pacman lock file to avoid inclusion in the snapshot."
fi

echo "==> Creating ZFS-Snapshot ${DATASET}@${SNAPSHOT_NAME}"
if ! zfs snapshot "${DATASET}@${SNAPSHOT_NAME}"; then
    echo "Could not create ZFS snapshot." >&2
    exit 1
fi

zfs set autosnap:description="${SNAPSHOT_DESCRIPTION}" "${DATASET}@${SNAPSHOT_NAME}"

if $DELETE_SNAPSHOTS; then
    SNAPSHOTS=$(zfs list -t snapshot -o name -s creation -r "${DATASET}" | grep "${DATASET}@autosnap_")
    SNAPSHOT_COUNT=$(echo "${SNAPSHOTS}" | wc -l)
    DELETE_COUNT=$(($SNAPSHOT_COUNT - $MAX_SNAPSHOTS))
    if [[ "$DELETE_COUNT" -gt 0 ]]; then
        echo "==> Deleting $DELETE_COUNT old snapshots"
        SNAPSHOTS_TO_DELETE=$(echo "${SNAPSHOTS}" | head -n "$DELETE_COUNT")
        while read -r SNAPSHOT; do
            echo "Deleting snapshot $SNAPSHOT"
            zfs destroy "$SNAPSHOT"
        done <<< "$SNAPSHOTS_TO_DELETE"
    fi
fi
